
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: string
  nickname: string
  email: string
  password: string
}

/**
 * Model Game
 * 
 */
export type Game = {
  id: string
  name: string
  description: string
}

/**
 * Model Match
 * 
 */
export type Match = {
  id: string
  description: string
  date: Date
  time: string
}

/**
 * Model Group
 * 
 */
export type Group = {
  id: string
  name: string
  description: string
}

/**
 * Model GroupParticipants
 * 
 */
export type GroupParticipants = {
  id: string
  group_id: string
  participant_id: string
}

/**
 * Model MatchParticipants
 * 
 */
export type MatchParticipants = {
  id: string
  group_id: string
  participant_id: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<GlobalReject>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<GlobalReject>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<GlobalReject>;

  /**
   * `prisma.groupParticipants`: Exposes CRUD operations for the **GroupParticipants** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupParticipants
    * const groupParticipants = await prisma.groupParticipants.findMany()
    * ```
    */
  get groupParticipants(): Prisma.GroupParticipantsDelegate<GlobalReject>;

  /**
   * `prisma.matchParticipants`: Exposes CRUD operations for the **MatchParticipants** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchParticipants
    * const matchParticipants = await prisma.matchParticipants.findMany()
    * ```
    */
  get matchParticipants(): Prisma.MatchParticipantsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Game: 'Game',
    Match: 'Match',
    Group: 'Group',
    GroupParticipants: 'GroupParticipants',
    MatchParticipants: 'MatchParticipants'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    GroupParticipants: number
    MatchParticipants: number
  }

  export type UserCountOutputTypeSelect = {
    GroupParticipants?: boolean
    MatchParticipants?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type GroupCountOutputType
   */


  export type GroupCountOutputType = {
    GroupParticipants: number
    MatchParticipants: number
  }

  export type GroupCountOutputTypeSelect = {
    GroupParticipants?: boolean
    MatchParticipants?: boolean
  }

  export type GroupCountOutputTypeGetPayload<S extends boolean | null | undefined | GroupCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GroupCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (GroupCountOutputTypeArgs)
    ? GroupCountOutputType 
    : S extends { select: any } & (GroupCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof GroupCountOutputType ? GroupCountOutputType[P] : never
  } 
      : GroupCountOutputType




  // Custom InputTypes

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    nickname: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    nickname: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nickname: number
    email: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    nickname?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nickname?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nickname?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    nickname: string
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    nickname?: boolean
    email?: boolean
    password?: boolean
    GroupParticipants?: boolean | User$GroupParticipantsArgs
    MatchParticipants?: boolean | User$MatchParticipantsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    GroupParticipants?: boolean | User$GroupParticipantsArgs
    MatchParticipants?: boolean | User$MatchParticipantsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'GroupParticipants' ? Array < GroupParticipantsGetPayload<S['include'][P]>>  :
        P extends 'MatchParticipants' ? Array < MatchParticipantsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'GroupParticipants' ? Array < GroupParticipantsGetPayload<S['select'][P]>>  :
        P extends 'MatchParticipants' ? Array < MatchParticipantsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    GroupParticipants<T extends User$GroupParticipantsArgs= {}>(args?: Subset<T, User$GroupParticipantsArgs>): Prisma.PrismaPromise<Array<GroupParticipantsGetPayload<T>>| Null>;

    MatchParticipants<T extends User$MatchParticipantsArgs= {}>(args?: Subset<T, User$MatchParticipantsArgs>): Prisma.PrismaPromise<Array<MatchParticipantsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.GroupParticipants
   */
  export type User$GroupParticipantsArgs = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
    where?: GroupParticipantsWhereInput
    orderBy?: Enumerable<GroupParticipantsOrderByWithRelationInput>
    cursor?: GroupParticipantsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GroupParticipantsScalarFieldEnum>
  }


  /**
   * User.MatchParticipants
   */
  export type User$MatchParticipantsArgs = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
    where?: MatchParticipantsWhereInput
    orderBy?: Enumerable<MatchParticipantsOrderByWithRelationInput>
    cursor?: MatchParticipantsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MatchParticipantsScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Game
   */


  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type GameMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type GameMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type GameAggregateArgs = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs = {
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithAggregationInput>
    by: GameScalarFieldEnum[]
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }


  export type GameGroupByOutputType = {
    id: string
    name: string
    description: string
    _count: GameCountAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
  }


  export type GameGetPayload<S extends boolean | null | undefined | GameArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Game :
    S extends undefined ? never :
    S extends { include: any } & (GameArgs | GameFindManyArgs)
    ? Game 
    : S extends { select: any } & (GameArgs | GameFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Game ? Game[P] : never
  } 
      : Game


  type GameCountArgs = 
    Omit<GameFindManyArgs, 'select' | 'include'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GameFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GameFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Game'> extends True ? Prisma__GameClient<GameGetPayload<T>> : Prisma__GameClient<GameGetPayload<T> | null, null>

    /**
     * Find one Game that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GameFindUniqueOrThrowArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GameFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GameFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Game'> extends True ? Prisma__GameClient<GameGetPayload<T>> : Prisma__GameClient<GameGetPayload<T> | null, null>

    /**
     * Find the first Game that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GameFindFirstOrThrowArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GameFindManyArgs>(
      args?: SelectSubset<T, GameFindManyArgs>
    ): Prisma.PrismaPromise<Array<GameGetPayload<T>>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
    **/
    create<T extends GameCreateArgs>(
      args: SelectSubset<T, GameCreateArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Create many Games.
     *     @param {GameCreateManyArgs} args - Arguments to create many Games.
     *     @example
     *     // Create many Games
     *     const game = await prisma.game.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GameCreateManyArgs>(
      args?: SelectSubset<T, GameCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
    **/
    delete<T extends GameDeleteArgs>(
      args: SelectSubset<T, GameDeleteArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GameUpdateArgs>(
      args: SelectSubset<T, GameUpdateArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GameDeleteManyArgs>(
      args?: SelectSubset<T, GameDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GameUpdateManyArgs>(
      args: SelectSubset<T, GameUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
    **/
    upsert<T extends GameUpsertArgs>(
      args: SelectSubset<T, GameUpsertArgs>
    ): Prisma__GameClient<GameGetPayload<T>>

    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GameClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Game base type for findUnique actions
   */
  export type GameFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUnique
   */
  export interface GameFindUniqueArgs extends GameFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game base type for findFirst actions
   */
  export type GameFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: Enumerable<GameScalarFieldEnum>
  }

  /**
   * Game findFirst
   */
  export interface GameFindFirstArgs extends GameFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game findMany
   */
  export type GameFindManyArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game create
   */
  export type GameCreateArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }


  /**
   * Game createMany
   */
  export type GameCreateManyArgs = {
    /**
     * The data used to create many Games.
     */
    data: Enumerable<GameCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Game update
   */
  export type GameUpdateArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
  }


  /**
   * Game upsert
   */
  export type GameUpsertArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }


  /**
   * Game delete
   */
  export type GameDeleteArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
  }


  /**
   * Game without action
   */
  export type GameArgs = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect | null
  }



  /**
   * Model Match
   */


  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchMinAggregateOutputType = {
    id: string | null
    description: string | null
    date: Date | null
    time: string | null
  }

  export type MatchMaxAggregateOutputType = {
    id: string | null
    description: string | null
    date: Date | null
    time: string | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    description: number
    date: number
    time: number
    _all: number
  }


  export type MatchMinAggregateInputType = {
    id?: true
    description?: true
    date?: true
    time?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    description?: true
    date?: true
    time?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    description?: true
    date?: true
    time?: true
    _all?: true
  }

  export type MatchAggregateArgs = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs = {
    where?: MatchWhereInput
    orderBy?: Enumerable<MatchOrderByWithAggregationInput>
    by: MatchScalarFieldEnum[]
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }


  export type MatchGroupByOutputType = {
    id: string
    description: string
    date: Date
    time: string
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect = {
    id?: boolean
    description?: boolean
    date?: boolean
    time?: boolean
  }


  export type MatchGetPayload<S extends boolean | null | undefined | MatchArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Match :
    S extends undefined ? never :
    S extends { include: any } & (MatchArgs | MatchFindManyArgs)
    ? Match 
    : S extends { select: any } & (MatchArgs | MatchFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Match ? Match[P] : never
  } 
      : Match


  type MatchCountArgs = 
    Omit<MatchFindManyArgs, 'select' | 'include'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MatchFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MatchFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Match'> extends True ? Prisma__MatchClient<MatchGetPayload<T>> : Prisma__MatchClient<MatchGetPayload<T> | null, null>

    /**
     * Find one Match that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MatchFindUniqueOrThrowArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MatchFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MatchFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Match'> extends True ? Prisma__MatchClient<MatchGetPayload<T>> : Prisma__MatchClient<MatchGetPayload<T> | null, null>

    /**
     * Find the first Match that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MatchFindFirstOrThrowArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MatchFindManyArgs>(
      args?: SelectSubset<T, MatchFindManyArgs>
    ): Prisma.PrismaPromise<Array<MatchGetPayload<T>>>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
    **/
    create<T extends MatchCreateArgs>(
      args: SelectSubset<T, MatchCreateArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Create many Matches.
     *     @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     *     @example
     *     // Create many Matches
     *     const match = await prisma.match.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MatchCreateManyArgs>(
      args?: SelectSubset<T, MatchCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
    **/
    delete<T extends MatchDeleteArgs>(
      args: SelectSubset<T, MatchDeleteArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MatchUpdateArgs>(
      args: SelectSubset<T, MatchUpdateArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MatchDeleteManyArgs>(
      args?: SelectSubset<T, MatchDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MatchUpdateManyArgs>(
      args: SelectSubset<T, MatchUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
    **/
    upsert<T extends MatchUpsertArgs>(
      args: SelectSubset<T, MatchUpsertArgs>
    ): Prisma__MatchClient<MatchGetPayload<T>>

    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MatchClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Match base type for findUnique actions
   */
  export type MatchFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUnique
   */
  export interface MatchFindUniqueArgs extends MatchFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match base type for findFirst actions
   */
  export type MatchFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: Enumerable<MatchScalarFieldEnum>
  }

  /**
   * Match findFirst
   */
  export interface MatchFindFirstArgs extends MatchFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Match findMany
   */
  export type MatchFindManyArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: Enumerable<MatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: Enumerable<MatchScalarFieldEnum>
  }


  /**
   * Match create
   */
  export type MatchCreateArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }


  /**
   * Match createMany
   */
  export type MatchCreateManyArgs = {
    /**
     * The data used to create many Matches.
     */
    data: Enumerable<MatchCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Match update
   */
  export type MatchUpdateArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
  }


  /**
   * Match upsert
   */
  export type MatchUpsertArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }


  /**
   * Match delete
   */
  export type MatchDeleteArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }


  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
  }


  /**
   * Match without action
   */
  export type MatchArgs = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect | null
  }



  /**
   * Model Group
   */


  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type GroupMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type GroupMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type GroupAggregateArgs = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs = {
    where?: GroupWhereInput
    orderBy?: Enumerable<GroupOrderByWithAggregationInput>
    by: GroupScalarFieldEnum[]
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }


  export type GroupGroupByOutputType = {
    id: string
    name: string
    description: string
    _count: GroupCountAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    GroupParticipants?: boolean | Group$GroupParticipantsArgs
    MatchParticipants?: boolean | Group$MatchParticipantsArgs
    _count?: boolean | GroupCountOutputTypeArgs
  }


  export type GroupInclude = {
    GroupParticipants?: boolean | Group$GroupParticipantsArgs
    MatchParticipants?: boolean | Group$MatchParticipantsArgs
    _count?: boolean | GroupCountOutputTypeArgs
  }

  export type GroupGetPayload<S extends boolean | null | undefined | GroupArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Group :
    S extends undefined ? never :
    S extends { include: any } & (GroupArgs | GroupFindManyArgs)
    ? Group  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'GroupParticipants' ? Array < GroupParticipantsGetPayload<S['include'][P]>>  :
        P extends 'MatchParticipants' ? Array < MatchParticipantsGetPayload<S['include'][P]>>  :
        P extends '_count' ? GroupCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GroupArgs | GroupFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'GroupParticipants' ? Array < GroupParticipantsGetPayload<S['select'][P]>>  :
        P extends 'MatchParticipants' ? Array < MatchParticipantsGetPayload<S['select'][P]>>  :
        P extends '_count' ? GroupCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Group ? Group[P] : never
  } 
      : Group


  type GroupCountArgs = 
    Omit<GroupFindManyArgs, 'select' | 'include'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Group'> extends True ? Prisma__GroupClient<GroupGetPayload<T>> : Prisma__GroupClient<GroupGetPayload<T> | null, null>

    /**
     * Find one Group that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupFindUniqueOrThrowArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Group'> extends True ? Prisma__GroupClient<GroupGetPayload<T>> : Prisma__GroupClient<GroupGetPayload<T> | null, null>

    /**
     * Find the first Group that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupFindFirstOrThrowArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupFindManyArgs>(
      args?: SelectSubset<T, GroupFindManyArgs>
    ): Prisma.PrismaPromise<Array<GroupGetPayload<T>>>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
    **/
    create<T extends GroupCreateArgs>(
      args: SelectSubset<T, GroupCreateArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Create many Groups.
     *     @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const group = await prisma.group.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupCreateManyArgs>(
      args?: SelectSubset<T, GroupCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
    **/
    delete<T extends GroupDeleteArgs>(
      args: SelectSubset<T, GroupDeleteArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupUpdateArgs>(
      args: SelectSubset<T, GroupUpdateArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupDeleteManyArgs>(
      args?: SelectSubset<T, GroupDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupUpdateManyArgs>(
      args: SelectSubset<T, GroupUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
    **/
    upsert<T extends GroupUpsertArgs>(
      args: SelectSubset<T, GroupUpsertArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    GroupParticipants<T extends Group$GroupParticipantsArgs= {}>(args?: Subset<T, Group$GroupParticipantsArgs>): Prisma.PrismaPromise<Array<GroupParticipantsGetPayload<T>>| Null>;

    MatchParticipants<T extends Group$MatchParticipantsArgs= {}>(args?: Subset<T, Group$MatchParticipantsArgs>): Prisma.PrismaPromise<Array<MatchParticipantsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Group base type for findUnique actions
   */
  export type GroupFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUnique
   */
  export interface GroupFindUniqueArgs extends GroupFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }


  /**
   * Group base type for findFirst actions
   */
  export type GroupFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: Enumerable<GroupScalarFieldEnum>
  }

  /**
   * Group findFirst
   */
  export interface GroupFindFirstArgs extends GroupFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: Enumerable<GroupScalarFieldEnum>
  }


  /**
   * Group findMany
   */
  export type GroupFindManyArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: Enumerable<GroupScalarFieldEnum>
  }


  /**
   * Group create
   */
  export type GroupCreateArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }


  /**
   * Group createMany
   */
  export type GroupCreateManyArgs = {
    /**
     * The data used to create many Groups.
     */
    data: Enumerable<GroupCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Group update
   */
  export type GroupUpdateArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }


  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
  }


  /**
   * Group upsert
   */
  export type GroupUpsertArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }


  /**
   * Group delete
   */
  export type GroupDeleteArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }


  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
  }


  /**
   * Group.GroupParticipants
   */
  export type Group$GroupParticipantsArgs = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
    where?: GroupParticipantsWhereInput
    orderBy?: Enumerable<GroupParticipantsOrderByWithRelationInput>
    cursor?: GroupParticipantsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GroupParticipantsScalarFieldEnum>
  }


  /**
   * Group.MatchParticipants
   */
  export type Group$MatchParticipantsArgs = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
    where?: MatchParticipantsWhereInput
    orderBy?: Enumerable<MatchParticipantsOrderByWithRelationInput>
    cursor?: MatchParticipantsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MatchParticipantsScalarFieldEnum>
  }


  /**
   * Group without action
   */
  export type GroupArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
  }



  /**
   * Model GroupParticipants
   */


  export type AggregateGroupParticipants = {
    _count: GroupParticipantsCountAggregateOutputType | null
    _min: GroupParticipantsMinAggregateOutputType | null
    _max: GroupParticipantsMaxAggregateOutputType | null
  }

  export type GroupParticipantsMinAggregateOutputType = {
    id: string | null
    group_id: string | null
    participant_id: string | null
  }

  export type GroupParticipantsMaxAggregateOutputType = {
    id: string | null
    group_id: string | null
    participant_id: string | null
  }

  export type GroupParticipantsCountAggregateOutputType = {
    id: number
    group_id: number
    participant_id: number
    _all: number
  }


  export type GroupParticipantsMinAggregateInputType = {
    id?: true
    group_id?: true
    participant_id?: true
  }

  export type GroupParticipantsMaxAggregateInputType = {
    id?: true
    group_id?: true
    participant_id?: true
  }

  export type GroupParticipantsCountAggregateInputType = {
    id?: true
    group_id?: true
    participant_id?: true
    _all?: true
  }

  export type GroupParticipantsAggregateArgs = {
    /**
     * Filter which GroupParticipants to aggregate.
     */
    where?: GroupParticipantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupParticipants to fetch.
     */
    orderBy?: Enumerable<GroupParticipantsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupParticipantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupParticipants
    **/
    _count?: true | GroupParticipantsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupParticipantsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupParticipantsMaxAggregateInputType
  }

  export type GetGroupParticipantsAggregateType<T extends GroupParticipantsAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupParticipants]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupParticipants[P]>
      : GetScalarType<T[P], AggregateGroupParticipants[P]>
  }




  export type GroupParticipantsGroupByArgs = {
    where?: GroupParticipantsWhereInput
    orderBy?: Enumerable<GroupParticipantsOrderByWithAggregationInput>
    by: GroupParticipantsScalarFieldEnum[]
    having?: GroupParticipantsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupParticipantsCountAggregateInputType | true
    _min?: GroupParticipantsMinAggregateInputType
    _max?: GroupParticipantsMaxAggregateInputType
  }


  export type GroupParticipantsGroupByOutputType = {
    id: string
    group_id: string
    participant_id: string
    _count: GroupParticipantsCountAggregateOutputType | null
    _min: GroupParticipantsMinAggregateOutputType | null
    _max: GroupParticipantsMaxAggregateOutputType | null
  }

  type GetGroupParticipantsGroupByPayload<T extends GroupParticipantsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GroupParticipantsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupParticipantsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupParticipantsGroupByOutputType[P]>
            : GetScalarType<T[P], GroupParticipantsGroupByOutputType[P]>
        }
      >
    >


  export type GroupParticipantsSelect = {
    id?: boolean
    group_id?: boolean
    participant_id?: boolean
    group?: boolean | GroupArgs
    participant?: boolean | UserArgs
  }


  export type GroupParticipantsInclude = {
    group?: boolean | GroupArgs
    participant?: boolean | UserArgs
  }

  export type GroupParticipantsGetPayload<S extends boolean | null | undefined | GroupParticipantsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GroupParticipants :
    S extends undefined ? never :
    S extends { include: any } & (GroupParticipantsArgs | GroupParticipantsFindManyArgs)
    ? GroupParticipants  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'group' ? GroupGetPayload<S['include'][P]> :
        P extends 'participant' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GroupParticipantsArgs | GroupParticipantsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'group' ? GroupGetPayload<S['select'][P]> :
        P extends 'participant' ? UserGetPayload<S['select'][P]> :  P extends keyof GroupParticipants ? GroupParticipants[P] : never
  } 
      : GroupParticipants


  type GroupParticipantsCountArgs = 
    Omit<GroupParticipantsFindManyArgs, 'select' | 'include'> & {
      select?: GroupParticipantsCountAggregateInputType | true
    }

  export interface GroupParticipantsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one GroupParticipants that matches the filter.
     * @param {GroupParticipantsFindUniqueArgs} args - Arguments to find a GroupParticipants
     * @example
     * // Get one GroupParticipants
     * const groupParticipants = await prisma.groupParticipants.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupParticipantsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupParticipantsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GroupParticipants'> extends True ? Prisma__GroupParticipantsClient<GroupParticipantsGetPayload<T>> : Prisma__GroupParticipantsClient<GroupParticipantsGetPayload<T> | null, null>

    /**
     * Find one GroupParticipants that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GroupParticipantsFindUniqueOrThrowArgs} args - Arguments to find a GroupParticipants
     * @example
     * // Get one GroupParticipants
     * const groupParticipants = await prisma.groupParticipants.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupParticipantsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupParticipantsFindUniqueOrThrowArgs>
    ): Prisma__GroupParticipantsClient<GroupParticipantsGetPayload<T>>

    /**
     * Find the first GroupParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupParticipantsFindFirstArgs} args - Arguments to find a GroupParticipants
     * @example
     * // Get one GroupParticipants
     * const groupParticipants = await prisma.groupParticipants.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupParticipantsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupParticipantsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GroupParticipants'> extends True ? Prisma__GroupParticipantsClient<GroupParticipantsGetPayload<T>> : Prisma__GroupParticipantsClient<GroupParticipantsGetPayload<T> | null, null>

    /**
     * Find the first GroupParticipants that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupParticipantsFindFirstOrThrowArgs} args - Arguments to find a GroupParticipants
     * @example
     * // Get one GroupParticipants
     * const groupParticipants = await prisma.groupParticipants.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupParticipantsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupParticipantsFindFirstOrThrowArgs>
    ): Prisma__GroupParticipantsClient<GroupParticipantsGetPayload<T>>

    /**
     * Find zero or more GroupParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupParticipantsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupParticipants
     * const groupParticipants = await prisma.groupParticipants.findMany()
     * 
     * // Get first 10 GroupParticipants
     * const groupParticipants = await prisma.groupParticipants.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupParticipantsWithIdOnly = await prisma.groupParticipants.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupParticipantsFindManyArgs>(
      args?: SelectSubset<T, GroupParticipantsFindManyArgs>
    ): Prisma.PrismaPromise<Array<GroupParticipantsGetPayload<T>>>

    /**
     * Create a GroupParticipants.
     * @param {GroupParticipantsCreateArgs} args - Arguments to create a GroupParticipants.
     * @example
     * // Create one GroupParticipants
     * const GroupParticipants = await prisma.groupParticipants.create({
     *   data: {
     *     // ... data to create a GroupParticipants
     *   }
     * })
     * 
    **/
    create<T extends GroupParticipantsCreateArgs>(
      args: SelectSubset<T, GroupParticipantsCreateArgs>
    ): Prisma__GroupParticipantsClient<GroupParticipantsGetPayload<T>>

    /**
     * Create many GroupParticipants.
     *     @param {GroupParticipantsCreateManyArgs} args - Arguments to create many GroupParticipants.
     *     @example
     *     // Create many GroupParticipants
     *     const groupParticipants = await prisma.groupParticipants.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupParticipantsCreateManyArgs>(
      args?: SelectSubset<T, GroupParticipantsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GroupParticipants.
     * @param {GroupParticipantsDeleteArgs} args - Arguments to delete one GroupParticipants.
     * @example
     * // Delete one GroupParticipants
     * const GroupParticipants = await prisma.groupParticipants.delete({
     *   where: {
     *     // ... filter to delete one GroupParticipants
     *   }
     * })
     * 
    **/
    delete<T extends GroupParticipantsDeleteArgs>(
      args: SelectSubset<T, GroupParticipantsDeleteArgs>
    ): Prisma__GroupParticipantsClient<GroupParticipantsGetPayload<T>>

    /**
     * Update one GroupParticipants.
     * @param {GroupParticipantsUpdateArgs} args - Arguments to update one GroupParticipants.
     * @example
     * // Update one GroupParticipants
     * const groupParticipants = await prisma.groupParticipants.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupParticipantsUpdateArgs>(
      args: SelectSubset<T, GroupParticipantsUpdateArgs>
    ): Prisma__GroupParticipantsClient<GroupParticipantsGetPayload<T>>

    /**
     * Delete zero or more GroupParticipants.
     * @param {GroupParticipantsDeleteManyArgs} args - Arguments to filter GroupParticipants to delete.
     * @example
     * // Delete a few GroupParticipants
     * const { count } = await prisma.groupParticipants.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupParticipantsDeleteManyArgs>(
      args?: SelectSubset<T, GroupParticipantsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupParticipantsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupParticipants
     * const groupParticipants = await prisma.groupParticipants.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupParticipantsUpdateManyArgs>(
      args: SelectSubset<T, GroupParticipantsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupParticipants.
     * @param {GroupParticipantsUpsertArgs} args - Arguments to update or create a GroupParticipants.
     * @example
     * // Update or create a GroupParticipants
     * const groupParticipants = await prisma.groupParticipants.upsert({
     *   create: {
     *     // ... data to create a GroupParticipants
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupParticipants we want to update
     *   }
     * })
    **/
    upsert<T extends GroupParticipantsUpsertArgs>(
      args: SelectSubset<T, GroupParticipantsUpsertArgs>
    ): Prisma__GroupParticipantsClient<GroupParticipantsGetPayload<T>>

    /**
     * Count the number of GroupParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupParticipantsCountArgs} args - Arguments to filter GroupParticipants to count.
     * @example
     * // Count the number of GroupParticipants
     * const count = await prisma.groupParticipants.count({
     *   where: {
     *     // ... the filter for the GroupParticipants we want to count
     *   }
     * })
    **/
    count<T extends GroupParticipantsCountArgs>(
      args?: Subset<T, GroupParticipantsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupParticipantsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupParticipantsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupParticipantsAggregateArgs>(args: Subset<T, GroupParticipantsAggregateArgs>): Prisma.PrismaPromise<GetGroupParticipantsAggregateType<T>>

    /**
     * Group by GroupParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupParticipantsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupParticipantsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupParticipantsGroupByArgs['orderBy'] }
        : { orderBy?: GroupParticipantsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupParticipantsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupParticipantsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupParticipants.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupParticipantsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    group<T extends GroupArgs= {}>(args?: Subset<T, GroupArgs>): Prisma__GroupClient<GroupGetPayload<T> | Null>;

    participant<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GroupParticipants base type for findUnique actions
   */
  export type GroupParticipantsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
    /**
     * Filter, which GroupParticipants to fetch.
     */
    where: GroupParticipantsWhereUniqueInput
  }

  /**
   * GroupParticipants findUnique
   */
  export interface GroupParticipantsFindUniqueArgs extends GroupParticipantsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupParticipants findUniqueOrThrow
   */
  export type GroupParticipantsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
    /**
     * Filter, which GroupParticipants to fetch.
     */
    where: GroupParticipantsWhereUniqueInput
  }


  /**
   * GroupParticipants base type for findFirst actions
   */
  export type GroupParticipantsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
    /**
     * Filter, which GroupParticipants to fetch.
     */
    where?: GroupParticipantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupParticipants to fetch.
     */
    orderBy?: Enumerable<GroupParticipantsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupParticipants.
     */
    cursor?: GroupParticipantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupParticipants.
     */
    distinct?: Enumerable<GroupParticipantsScalarFieldEnum>
  }

  /**
   * GroupParticipants findFirst
   */
  export interface GroupParticipantsFindFirstArgs extends GroupParticipantsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupParticipants findFirstOrThrow
   */
  export type GroupParticipantsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
    /**
     * Filter, which GroupParticipants to fetch.
     */
    where?: GroupParticipantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupParticipants to fetch.
     */
    orderBy?: Enumerable<GroupParticipantsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupParticipants.
     */
    cursor?: GroupParticipantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupParticipants.
     */
    distinct?: Enumerable<GroupParticipantsScalarFieldEnum>
  }


  /**
   * GroupParticipants findMany
   */
  export type GroupParticipantsFindManyArgs = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
    /**
     * Filter, which GroupParticipants to fetch.
     */
    where?: GroupParticipantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupParticipants to fetch.
     */
    orderBy?: Enumerable<GroupParticipantsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupParticipants.
     */
    cursor?: GroupParticipantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupParticipants.
     */
    skip?: number
    distinct?: Enumerable<GroupParticipantsScalarFieldEnum>
  }


  /**
   * GroupParticipants create
   */
  export type GroupParticipantsCreateArgs = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
    /**
     * The data needed to create a GroupParticipants.
     */
    data: XOR<GroupParticipantsCreateInput, GroupParticipantsUncheckedCreateInput>
  }


  /**
   * GroupParticipants createMany
   */
  export type GroupParticipantsCreateManyArgs = {
    /**
     * The data used to create many GroupParticipants.
     */
    data: Enumerable<GroupParticipantsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GroupParticipants update
   */
  export type GroupParticipantsUpdateArgs = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
    /**
     * The data needed to update a GroupParticipants.
     */
    data: XOR<GroupParticipantsUpdateInput, GroupParticipantsUncheckedUpdateInput>
    /**
     * Choose, which GroupParticipants to update.
     */
    where: GroupParticipantsWhereUniqueInput
  }


  /**
   * GroupParticipants updateMany
   */
  export type GroupParticipantsUpdateManyArgs = {
    /**
     * The data used to update GroupParticipants.
     */
    data: XOR<GroupParticipantsUpdateManyMutationInput, GroupParticipantsUncheckedUpdateManyInput>
    /**
     * Filter which GroupParticipants to update
     */
    where?: GroupParticipantsWhereInput
  }


  /**
   * GroupParticipants upsert
   */
  export type GroupParticipantsUpsertArgs = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
    /**
     * The filter to search for the GroupParticipants to update in case it exists.
     */
    where: GroupParticipantsWhereUniqueInput
    /**
     * In case the GroupParticipants found by the `where` argument doesn't exist, create a new GroupParticipants with this data.
     */
    create: XOR<GroupParticipantsCreateInput, GroupParticipantsUncheckedCreateInput>
    /**
     * In case the GroupParticipants was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupParticipantsUpdateInput, GroupParticipantsUncheckedUpdateInput>
  }


  /**
   * GroupParticipants delete
   */
  export type GroupParticipantsDeleteArgs = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
    /**
     * Filter which GroupParticipants to delete.
     */
    where: GroupParticipantsWhereUniqueInput
  }


  /**
   * GroupParticipants deleteMany
   */
  export type GroupParticipantsDeleteManyArgs = {
    /**
     * Filter which GroupParticipants to delete
     */
    where?: GroupParticipantsWhereInput
  }


  /**
   * GroupParticipants without action
   */
  export type GroupParticipantsArgs = {
    /**
     * Select specific fields to fetch from the GroupParticipants
     */
    select?: GroupParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupParticipantsInclude | null
  }



  /**
   * Model MatchParticipants
   */


  export type AggregateMatchParticipants = {
    _count: MatchParticipantsCountAggregateOutputType | null
    _min: MatchParticipantsMinAggregateOutputType | null
    _max: MatchParticipantsMaxAggregateOutputType | null
  }

  export type MatchParticipantsMinAggregateOutputType = {
    id: string | null
    group_id: string | null
    participant_id: string | null
  }

  export type MatchParticipantsMaxAggregateOutputType = {
    id: string | null
    group_id: string | null
    participant_id: string | null
  }

  export type MatchParticipantsCountAggregateOutputType = {
    id: number
    group_id: number
    participant_id: number
    _all: number
  }


  export type MatchParticipantsMinAggregateInputType = {
    id?: true
    group_id?: true
    participant_id?: true
  }

  export type MatchParticipantsMaxAggregateInputType = {
    id?: true
    group_id?: true
    participant_id?: true
  }

  export type MatchParticipantsCountAggregateInputType = {
    id?: true
    group_id?: true
    participant_id?: true
    _all?: true
  }

  export type MatchParticipantsAggregateArgs = {
    /**
     * Filter which MatchParticipants to aggregate.
     */
    where?: MatchParticipantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchParticipants to fetch.
     */
    orderBy?: Enumerable<MatchParticipantsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchParticipantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchParticipants
    **/
    _count?: true | MatchParticipantsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchParticipantsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchParticipantsMaxAggregateInputType
  }

  export type GetMatchParticipantsAggregateType<T extends MatchParticipantsAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchParticipants]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchParticipants[P]>
      : GetScalarType<T[P], AggregateMatchParticipants[P]>
  }




  export type MatchParticipantsGroupByArgs = {
    where?: MatchParticipantsWhereInput
    orderBy?: Enumerable<MatchParticipantsOrderByWithAggregationInput>
    by: MatchParticipantsScalarFieldEnum[]
    having?: MatchParticipantsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchParticipantsCountAggregateInputType | true
    _min?: MatchParticipantsMinAggregateInputType
    _max?: MatchParticipantsMaxAggregateInputType
  }


  export type MatchParticipantsGroupByOutputType = {
    id: string
    group_id: string
    participant_id: string
    _count: MatchParticipantsCountAggregateOutputType | null
    _min: MatchParticipantsMinAggregateOutputType | null
    _max: MatchParticipantsMaxAggregateOutputType | null
  }

  type GetMatchParticipantsGroupByPayload<T extends MatchParticipantsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MatchParticipantsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchParticipantsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchParticipantsGroupByOutputType[P]>
            : GetScalarType<T[P], MatchParticipantsGroupByOutputType[P]>
        }
      >
    >


  export type MatchParticipantsSelect = {
    id?: boolean
    group_id?: boolean
    participant_id?: boolean
    group?: boolean | GroupArgs
    participant?: boolean | UserArgs
  }


  export type MatchParticipantsInclude = {
    group?: boolean | GroupArgs
    participant?: boolean | UserArgs
  }

  export type MatchParticipantsGetPayload<S extends boolean | null | undefined | MatchParticipantsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MatchParticipants :
    S extends undefined ? never :
    S extends { include: any } & (MatchParticipantsArgs | MatchParticipantsFindManyArgs)
    ? MatchParticipants  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'group' ? GroupGetPayload<S['include'][P]> :
        P extends 'participant' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MatchParticipantsArgs | MatchParticipantsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'group' ? GroupGetPayload<S['select'][P]> :
        P extends 'participant' ? UserGetPayload<S['select'][P]> :  P extends keyof MatchParticipants ? MatchParticipants[P] : never
  } 
      : MatchParticipants


  type MatchParticipantsCountArgs = 
    Omit<MatchParticipantsFindManyArgs, 'select' | 'include'> & {
      select?: MatchParticipantsCountAggregateInputType | true
    }

  export interface MatchParticipantsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MatchParticipants that matches the filter.
     * @param {MatchParticipantsFindUniqueArgs} args - Arguments to find a MatchParticipants
     * @example
     * // Get one MatchParticipants
     * const matchParticipants = await prisma.matchParticipants.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MatchParticipantsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MatchParticipantsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MatchParticipants'> extends True ? Prisma__MatchParticipantsClient<MatchParticipantsGetPayload<T>> : Prisma__MatchParticipantsClient<MatchParticipantsGetPayload<T> | null, null>

    /**
     * Find one MatchParticipants that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MatchParticipantsFindUniqueOrThrowArgs} args - Arguments to find a MatchParticipants
     * @example
     * // Get one MatchParticipants
     * const matchParticipants = await prisma.matchParticipants.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MatchParticipantsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MatchParticipantsFindUniqueOrThrowArgs>
    ): Prisma__MatchParticipantsClient<MatchParticipantsGetPayload<T>>

    /**
     * Find the first MatchParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantsFindFirstArgs} args - Arguments to find a MatchParticipants
     * @example
     * // Get one MatchParticipants
     * const matchParticipants = await prisma.matchParticipants.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MatchParticipantsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MatchParticipantsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MatchParticipants'> extends True ? Prisma__MatchParticipantsClient<MatchParticipantsGetPayload<T>> : Prisma__MatchParticipantsClient<MatchParticipantsGetPayload<T> | null, null>

    /**
     * Find the first MatchParticipants that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantsFindFirstOrThrowArgs} args - Arguments to find a MatchParticipants
     * @example
     * // Get one MatchParticipants
     * const matchParticipants = await prisma.matchParticipants.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MatchParticipantsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MatchParticipantsFindFirstOrThrowArgs>
    ): Prisma__MatchParticipantsClient<MatchParticipantsGetPayload<T>>

    /**
     * Find zero or more MatchParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchParticipants
     * const matchParticipants = await prisma.matchParticipants.findMany()
     * 
     * // Get first 10 MatchParticipants
     * const matchParticipants = await prisma.matchParticipants.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchParticipantsWithIdOnly = await prisma.matchParticipants.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MatchParticipantsFindManyArgs>(
      args?: SelectSubset<T, MatchParticipantsFindManyArgs>
    ): Prisma.PrismaPromise<Array<MatchParticipantsGetPayload<T>>>

    /**
     * Create a MatchParticipants.
     * @param {MatchParticipantsCreateArgs} args - Arguments to create a MatchParticipants.
     * @example
     * // Create one MatchParticipants
     * const MatchParticipants = await prisma.matchParticipants.create({
     *   data: {
     *     // ... data to create a MatchParticipants
     *   }
     * })
     * 
    **/
    create<T extends MatchParticipantsCreateArgs>(
      args: SelectSubset<T, MatchParticipantsCreateArgs>
    ): Prisma__MatchParticipantsClient<MatchParticipantsGetPayload<T>>

    /**
     * Create many MatchParticipants.
     *     @param {MatchParticipantsCreateManyArgs} args - Arguments to create many MatchParticipants.
     *     @example
     *     // Create many MatchParticipants
     *     const matchParticipants = await prisma.matchParticipants.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MatchParticipantsCreateManyArgs>(
      args?: SelectSubset<T, MatchParticipantsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MatchParticipants.
     * @param {MatchParticipantsDeleteArgs} args - Arguments to delete one MatchParticipants.
     * @example
     * // Delete one MatchParticipants
     * const MatchParticipants = await prisma.matchParticipants.delete({
     *   where: {
     *     // ... filter to delete one MatchParticipants
     *   }
     * })
     * 
    **/
    delete<T extends MatchParticipantsDeleteArgs>(
      args: SelectSubset<T, MatchParticipantsDeleteArgs>
    ): Prisma__MatchParticipantsClient<MatchParticipantsGetPayload<T>>

    /**
     * Update one MatchParticipants.
     * @param {MatchParticipantsUpdateArgs} args - Arguments to update one MatchParticipants.
     * @example
     * // Update one MatchParticipants
     * const matchParticipants = await prisma.matchParticipants.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MatchParticipantsUpdateArgs>(
      args: SelectSubset<T, MatchParticipantsUpdateArgs>
    ): Prisma__MatchParticipantsClient<MatchParticipantsGetPayload<T>>

    /**
     * Delete zero or more MatchParticipants.
     * @param {MatchParticipantsDeleteManyArgs} args - Arguments to filter MatchParticipants to delete.
     * @example
     * // Delete a few MatchParticipants
     * const { count } = await prisma.matchParticipants.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MatchParticipantsDeleteManyArgs>(
      args?: SelectSubset<T, MatchParticipantsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchParticipants
     * const matchParticipants = await prisma.matchParticipants.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MatchParticipantsUpdateManyArgs>(
      args: SelectSubset<T, MatchParticipantsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MatchParticipants.
     * @param {MatchParticipantsUpsertArgs} args - Arguments to update or create a MatchParticipants.
     * @example
     * // Update or create a MatchParticipants
     * const matchParticipants = await prisma.matchParticipants.upsert({
     *   create: {
     *     // ... data to create a MatchParticipants
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchParticipants we want to update
     *   }
     * })
    **/
    upsert<T extends MatchParticipantsUpsertArgs>(
      args: SelectSubset<T, MatchParticipantsUpsertArgs>
    ): Prisma__MatchParticipantsClient<MatchParticipantsGetPayload<T>>

    /**
     * Count the number of MatchParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantsCountArgs} args - Arguments to filter MatchParticipants to count.
     * @example
     * // Count the number of MatchParticipants
     * const count = await prisma.matchParticipants.count({
     *   where: {
     *     // ... the filter for the MatchParticipants we want to count
     *   }
     * })
    **/
    count<T extends MatchParticipantsCountArgs>(
      args?: Subset<T, MatchParticipantsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchParticipantsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchParticipantsAggregateArgs>(args: Subset<T, MatchParticipantsAggregateArgs>): Prisma.PrismaPromise<GetMatchParticipantsAggregateType<T>>

    /**
     * Group by MatchParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchParticipantsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchParticipantsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchParticipantsGroupByArgs['orderBy'] }
        : { orderBy?: MatchParticipantsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchParticipantsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchParticipantsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchParticipants.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MatchParticipantsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    group<T extends GroupArgs= {}>(args?: Subset<T, GroupArgs>): Prisma__GroupClient<GroupGetPayload<T> | Null>;

    participant<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MatchParticipants base type for findUnique actions
   */
  export type MatchParticipantsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
    /**
     * Filter, which MatchParticipants to fetch.
     */
    where: MatchParticipantsWhereUniqueInput
  }

  /**
   * MatchParticipants findUnique
   */
  export interface MatchParticipantsFindUniqueArgs extends MatchParticipantsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MatchParticipants findUniqueOrThrow
   */
  export type MatchParticipantsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
    /**
     * Filter, which MatchParticipants to fetch.
     */
    where: MatchParticipantsWhereUniqueInput
  }


  /**
   * MatchParticipants base type for findFirst actions
   */
  export type MatchParticipantsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
    /**
     * Filter, which MatchParticipants to fetch.
     */
    where?: MatchParticipantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchParticipants to fetch.
     */
    orderBy?: Enumerable<MatchParticipantsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchParticipants.
     */
    cursor?: MatchParticipantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchParticipants.
     */
    distinct?: Enumerable<MatchParticipantsScalarFieldEnum>
  }

  /**
   * MatchParticipants findFirst
   */
  export interface MatchParticipantsFindFirstArgs extends MatchParticipantsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MatchParticipants findFirstOrThrow
   */
  export type MatchParticipantsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
    /**
     * Filter, which MatchParticipants to fetch.
     */
    where?: MatchParticipantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchParticipants to fetch.
     */
    orderBy?: Enumerable<MatchParticipantsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchParticipants.
     */
    cursor?: MatchParticipantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchParticipants.
     */
    distinct?: Enumerable<MatchParticipantsScalarFieldEnum>
  }


  /**
   * MatchParticipants findMany
   */
  export type MatchParticipantsFindManyArgs = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
    /**
     * Filter, which MatchParticipants to fetch.
     */
    where?: MatchParticipantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchParticipants to fetch.
     */
    orderBy?: Enumerable<MatchParticipantsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchParticipants.
     */
    cursor?: MatchParticipantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchParticipants.
     */
    skip?: number
    distinct?: Enumerable<MatchParticipantsScalarFieldEnum>
  }


  /**
   * MatchParticipants create
   */
  export type MatchParticipantsCreateArgs = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
    /**
     * The data needed to create a MatchParticipants.
     */
    data: XOR<MatchParticipantsCreateInput, MatchParticipantsUncheckedCreateInput>
  }


  /**
   * MatchParticipants createMany
   */
  export type MatchParticipantsCreateManyArgs = {
    /**
     * The data used to create many MatchParticipants.
     */
    data: Enumerable<MatchParticipantsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MatchParticipants update
   */
  export type MatchParticipantsUpdateArgs = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
    /**
     * The data needed to update a MatchParticipants.
     */
    data: XOR<MatchParticipantsUpdateInput, MatchParticipantsUncheckedUpdateInput>
    /**
     * Choose, which MatchParticipants to update.
     */
    where: MatchParticipantsWhereUniqueInput
  }


  /**
   * MatchParticipants updateMany
   */
  export type MatchParticipantsUpdateManyArgs = {
    /**
     * The data used to update MatchParticipants.
     */
    data: XOR<MatchParticipantsUpdateManyMutationInput, MatchParticipantsUncheckedUpdateManyInput>
    /**
     * Filter which MatchParticipants to update
     */
    where?: MatchParticipantsWhereInput
  }


  /**
   * MatchParticipants upsert
   */
  export type MatchParticipantsUpsertArgs = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
    /**
     * The filter to search for the MatchParticipants to update in case it exists.
     */
    where: MatchParticipantsWhereUniqueInput
    /**
     * In case the MatchParticipants found by the `where` argument doesn't exist, create a new MatchParticipants with this data.
     */
    create: XOR<MatchParticipantsCreateInput, MatchParticipantsUncheckedCreateInput>
    /**
     * In case the MatchParticipants was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchParticipantsUpdateInput, MatchParticipantsUncheckedUpdateInput>
  }


  /**
   * MatchParticipants delete
   */
  export type MatchParticipantsDeleteArgs = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
    /**
     * Filter which MatchParticipants to delete.
     */
    where: MatchParticipantsWhereUniqueInput
  }


  /**
   * MatchParticipants deleteMany
   */
  export type MatchParticipantsDeleteManyArgs = {
    /**
     * Filter which MatchParticipants to delete
     */
    where?: MatchParticipantsWhereInput
  }


  /**
   * MatchParticipants without action
   */
  export type MatchParticipantsArgs = {
    /**
     * Select specific fields to fetch from the MatchParticipants
     */
    select?: MatchParticipantsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchParticipantsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const GameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const GroupParticipantsScalarFieldEnum: {
    id: 'id',
    group_id: 'group_id',
    participant_id: 'participant_id'
  };

  export type GroupParticipantsScalarFieldEnum = (typeof GroupParticipantsScalarFieldEnum)[keyof typeof GroupParticipantsScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const MatchParticipantsScalarFieldEnum: {
    id: 'id',
    group_id: 'group_id',
    participant_id: 'participant_id'
  };

  export type MatchParticipantsScalarFieldEnum = (typeof MatchParticipantsScalarFieldEnum)[keyof typeof MatchParticipantsScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    description: 'description',
    date: 'date',
    time: 'time'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    nickname: 'nickname',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    nickname?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    GroupParticipants?: GroupParticipantsListRelationFilter
    MatchParticipants?: MatchParticipantsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    GroupParticipants?: GroupParticipantsOrderByRelationAggregateInput
    MatchParticipants?: MatchParticipantsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nickname?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type GameWhereInput = {
    AND?: Enumerable<GameWhereInput>
    OR?: Enumerable<GameWhereInput>
    NOT?: Enumerable<GameWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GameWhereUniqueInput = {
    id?: string
  }

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GameScalarWhereWithAggregatesInput>
    OR?: Enumerable<GameScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GameScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type MatchWhereInput = {
    AND?: Enumerable<MatchWhereInput>
    OR?: Enumerable<MatchWhereInput>
    NOT?: Enumerable<MatchWhereInput>
    id?: StringFilter | string
    description?: StringFilter | string
    date?: DateTimeFilter | Date | string
    time?: StringFilter | string
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
  }

  export type MatchWhereUniqueInput = {
    id?: string
  }

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MatchScalarWhereWithAggregatesInput>
    OR?: Enumerable<MatchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MatchScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    time?: StringWithAggregatesFilter | string
  }

  export type GroupWhereInput = {
    AND?: Enumerable<GroupWhereInput>
    OR?: Enumerable<GroupWhereInput>
    NOT?: Enumerable<GroupWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    GroupParticipants?: GroupParticipantsListRelationFilter
    MatchParticipants?: MatchParticipantsListRelationFilter
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    GroupParticipants?: GroupParticipantsOrderByRelationAggregateInput
    MatchParticipants?: MatchParticipantsOrderByRelationAggregateInput
  }

  export type GroupWhereUniqueInput = {
    id?: string
  }

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: GroupCountOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type GroupParticipantsWhereInput = {
    AND?: Enumerable<GroupParticipantsWhereInput>
    OR?: Enumerable<GroupParticipantsWhereInput>
    NOT?: Enumerable<GroupParticipantsWhereInput>
    id?: StringFilter | string
    group_id?: StringFilter | string
    participant_id?: StringFilter | string
    group?: XOR<GroupRelationFilter, GroupWhereInput>
    participant?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GroupParticipantsOrderByWithRelationInput = {
    id?: SortOrder
    group_id?: SortOrder
    participant_id?: SortOrder
    group?: GroupOrderByWithRelationInput
    participant?: UserOrderByWithRelationInput
  }

  export type GroupParticipantsWhereUniqueInput = {
    id?: string
  }

  export type GroupParticipantsOrderByWithAggregationInput = {
    id?: SortOrder
    group_id?: SortOrder
    participant_id?: SortOrder
    _count?: GroupParticipantsCountOrderByAggregateInput
    _max?: GroupParticipantsMaxOrderByAggregateInput
    _min?: GroupParticipantsMinOrderByAggregateInput
  }

  export type GroupParticipantsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupParticipantsScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupParticipantsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupParticipantsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    group_id?: StringWithAggregatesFilter | string
    participant_id?: StringWithAggregatesFilter | string
  }

  export type MatchParticipantsWhereInput = {
    AND?: Enumerable<MatchParticipantsWhereInput>
    OR?: Enumerable<MatchParticipantsWhereInput>
    NOT?: Enumerable<MatchParticipantsWhereInput>
    id?: StringFilter | string
    group_id?: StringFilter | string
    participant_id?: StringFilter | string
    group?: XOR<GroupRelationFilter, GroupWhereInput>
    participant?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MatchParticipantsOrderByWithRelationInput = {
    id?: SortOrder
    group_id?: SortOrder
    participant_id?: SortOrder
    group?: GroupOrderByWithRelationInput
    participant?: UserOrderByWithRelationInput
  }

  export type MatchParticipantsWhereUniqueInput = {
    id?: string
  }

  export type MatchParticipantsOrderByWithAggregationInput = {
    id?: SortOrder
    group_id?: SortOrder
    participant_id?: SortOrder
    _count?: MatchParticipantsCountOrderByAggregateInput
    _max?: MatchParticipantsMaxOrderByAggregateInput
    _min?: MatchParticipantsMinOrderByAggregateInput
  }

  export type MatchParticipantsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MatchParticipantsScalarWhereWithAggregatesInput>
    OR?: Enumerable<MatchParticipantsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MatchParticipantsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    group_id?: StringWithAggregatesFilter | string
    participant_id?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id: string
    nickname: string
    email: string
    password: string
    GroupParticipants?: GroupParticipantsCreateNestedManyWithoutParticipantInput
    MatchParticipants?: MatchParticipantsCreateNestedManyWithoutParticipantInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    nickname: string
    email: string
    password: string
    GroupParticipants?: GroupParticipantsUncheckedCreateNestedManyWithoutParticipantInput
    MatchParticipants?: MatchParticipantsUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    GroupParticipants?: GroupParticipantsUpdateManyWithoutParticipantNestedInput
    MatchParticipants?: MatchParticipantsUpdateManyWithoutParticipantNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    GroupParticipants?: GroupParticipantsUncheckedUpdateManyWithoutParticipantNestedInput
    MatchParticipants?: MatchParticipantsUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    nickname: string
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type GameCreateInput = {
    id: string
    name: string
    description: string
  }

  export type GameUncheckedCreateInput = {
    id: string
    name: string
    description: string
  }

  export type GameUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type GameUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type GameCreateManyInput = {
    id: string
    name: string
    description: string
  }

  export type GameUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type MatchCreateInput = {
    id: string
    description: string
    date: Date | string
    time: string
  }

  export type MatchUncheckedCreateInput = {
    id: string
    description: string
    date: Date | string
    time: string
  }

  export type MatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type MatchCreateManyInput = {
    id: string
    description: string
    date: Date | string
    time: string
  }

  export type MatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
  }

  export type GroupCreateInput = {
    id: string
    name: string
    description: string
    GroupParticipants?: GroupParticipantsCreateNestedManyWithoutGroupInput
    MatchParticipants?: MatchParticipantsCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateInput = {
    id: string
    name: string
    description: string
    GroupParticipants?: GroupParticipantsUncheckedCreateNestedManyWithoutGroupInput
    MatchParticipants?: MatchParticipantsUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    GroupParticipants?: GroupParticipantsUpdateManyWithoutGroupNestedInput
    MatchParticipants?: MatchParticipantsUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    GroupParticipants?: GroupParticipantsUncheckedUpdateManyWithoutGroupNestedInput
    MatchParticipants?: MatchParticipantsUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupCreateManyInput = {
    id: string
    name: string
    description: string
  }

  export type GroupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type GroupParticipantsCreateInput = {
    id: string
    group: GroupCreateNestedOneWithoutGroupParticipantsInput
    participant: UserCreateNestedOneWithoutGroupParticipantsInput
  }

  export type GroupParticipantsUncheckedCreateInput = {
    id: string
    group_id: string
    participant_id: string
  }

  export type GroupParticipantsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: GroupUpdateOneRequiredWithoutGroupParticipantsNestedInput
    participant?: UserUpdateOneRequiredWithoutGroupParticipantsNestedInput
  }

  export type GroupParticipantsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    group_id?: StringFieldUpdateOperationsInput | string
    participant_id?: StringFieldUpdateOperationsInput | string
  }

  export type GroupParticipantsCreateManyInput = {
    id: string
    group_id: string
    participant_id: string
  }

  export type GroupParticipantsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type GroupParticipantsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    group_id?: StringFieldUpdateOperationsInput | string
    participant_id?: StringFieldUpdateOperationsInput | string
  }

  export type MatchParticipantsCreateInput = {
    id: string
    group: GroupCreateNestedOneWithoutMatchParticipantsInput
    participant: UserCreateNestedOneWithoutMatchParticipantsInput
  }

  export type MatchParticipantsUncheckedCreateInput = {
    id: string
    group_id: string
    participant_id: string
  }

  export type MatchParticipantsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: GroupUpdateOneRequiredWithoutMatchParticipantsNestedInput
    participant?: UserUpdateOneRequiredWithoutMatchParticipantsNestedInput
  }

  export type MatchParticipantsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    group_id?: StringFieldUpdateOperationsInput | string
    participant_id?: StringFieldUpdateOperationsInput | string
  }

  export type MatchParticipantsCreateManyInput = {
    id: string
    group_id: string
    participant_id: string
  }

  export type MatchParticipantsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type MatchParticipantsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    group_id?: StringFieldUpdateOperationsInput | string
    participant_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type GroupParticipantsListRelationFilter = {
    every?: GroupParticipantsWhereInput
    some?: GroupParticipantsWhereInput
    none?: GroupParticipantsWhereInput
  }

  export type MatchParticipantsListRelationFilter = {
    every?: MatchParticipantsWhereInput
    some?: MatchParticipantsWhereInput
    none?: MatchParticipantsWhereInput
  }

  export type GroupParticipantsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchParticipantsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    time?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type GroupRelationFilter = {
    is?: GroupWhereInput
    isNot?: GroupWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GroupParticipantsCountOrderByAggregateInput = {
    id?: SortOrder
    group_id?: SortOrder
    participant_id?: SortOrder
  }

  export type GroupParticipantsMaxOrderByAggregateInput = {
    id?: SortOrder
    group_id?: SortOrder
    participant_id?: SortOrder
  }

  export type GroupParticipantsMinOrderByAggregateInput = {
    id?: SortOrder
    group_id?: SortOrder
    participant_id?: SortOrder
  }

  export type MatchParticipantsCountOrderByAggregateInput = {
    id?: SortOrder
    group_id?: SortOrder
    participant_id?: SortOrder
  }

  export type MatchParticipantsMaxOrderByAggregateInput = {
    id?: SortOrder
    group_id?: SortOrder
    participant_id?: SortOrder
  }

  export type MatchParticipantsMinOrderByAggregateInput = {
    id?: SortOrder
    group_id?: SortOrder
    participant_id?: SortOrder
  }

  export type GroupParticipantsCreateNestedManyWithoutParticipantInput = {
    create?: XOR<Enumerable<GroupParticipantsCreateWithoutParticipantInput>, Enumerable<GroupParticipantsUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<GroupParticipantsCreateOrConnectWithoutParticipantInput>
    createMany?: GroupParticipantsCreateManyParticipantInputEnvelope
    connect?: Enumerable<GroupParticipantsWhereUniqueInput>
  }

  export type MatchParticipantsCreateNestedManyWithoutParticipantInput = {
    create?: XOR<Enumerable<MatchParticipantsCreateWithoutParticipantInput>, Enumerable<MatchParticipantsUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<MatchParticipantsCreateOrConnectWithoutParticipantInput>
    createMany?: MatchParticipantsCreateManyParticipantInputEnvelope
    connect?: Enumerable<MatchParticipantsWhereUniqueInput>
  }

  export type GroupParticipantsUncheckedCreateNestedManyWithoutParticipantInput = {
    create?: XOR<Enumerable<GroupParticipantsCreateWithoutParticipantInput>, Enumerable<GroupParticipantsUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<GroupParticipantsCreateOrConnectWithoutParticipantInput>
    createMany?: GroupParticipantsCreateManyParticipantInputEnvelope
    connect?: Enumerable<GroupParticipantsWhereUniqueInput>
  }

  export type MatchParticipantsUncheckedCreateNestedManyWithoutParticipantInput = {
    create?: XOR<Enumerable<MatchParticipantsCreateWithoutParticipantInput>, Enumerable<MatchParticipantsUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<MatchParticipantsCreateOrConnectWithoutParticipantInput>
    createMany?: MatchParticipantsCreateManyParticipantInputEnvelope
    connect?: Enumerable<MatchParticipantsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type GroupParticipantsUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<Enumerable<GroupParticipantsCreateWithoutParticipantInput>, Enumerable<GroupParticipantsUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<GroupParticipantsCreateOrConnectWithoutParticipantInput>
    upsert?: Enumerable<GroupParticipantsUpsertWithWhereUniqueWithoutParticipantInput>
    createMany?: GroupParticipantsCreateManyParticipantInputEnvelope
    set?: Enumerable<GroupParticipantsWhereUniqueInput>
    disconnect?: Enumerable<GroupParticipantsWhereUniqueInput>
    delete?: Enumerable<GroupParticipantsWhereUniqueInput>
    connect?: Enumerable<GroupParticipantsWhereUniqueInput>
    update?: Enumerable<GroupParticipantsUpdateWithWhereUniqueWithoutParticipantInput>
    updateMany?: Enumerable<GroupParticipantsUpdateManyWithWhereWithoutParticipantInput>
    deleteMany?: Enumerable<GroupParticipantsScalarWhereInput>
  }

  export type MatchParticipantsUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<Enumerable<MatchParticipantsCreateWithoutParticipantInput>, Enumerable<MatchParticipantsUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<MatchParticipantsCreateOrConnectWithoutParticipantInput>
    upsert?: Enumerable<MatchParticipantsUpsertWithWhereUniqueWithoutParticipantInput>
    createMany?: MatchParticipantsCreateManyParticipantInputEnvelope
    set?: Enumerable<MatchParticipantsWhereUniqueInput>
    disconnect?: Enumerable<MatchParticipantsWhereUniqueInput>
    delete?: Enumerable<MatchParticipantsWhereUniqueInput>
    connect?: Enumerable<MatchParticipantsWhereUniqueInput>
    update?: Enumerable<MatchParticipantsUpdateWithWhereUniqueWithoutParticipantInput>
    updateMany?: Enumerable<MatchParticipantsUpdateManyWithWhereWithoutParticipantInput>
    deleteMany?: Enumerable<MatchParticipantsScalarWhereInput>
  }

  export type GroupParticipantsUncheckedUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<Enumerable<GroupParticipantsCreateWithoutParticipantInput>, Enumerable<GroupParticipantsUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<GroupParticipantsCreateOrConnectWithoutParticipantInput>
    upsert?: Enumerable<GroupParticipantsUpsertWithWhereUniqueWithoutParticipantInput>
    createMany?: GroupParticipantsCreateManyParticipantInputEnvelope
    set?: Enumerable<GroupParticipantsWhereUniqueInput>
    disconnect?: Enumerable<GroupParticipantsWhereUniqueInput>
    delete?: Enumerable<GroupParticipantsWhereUniqueInput>
    connect?: Enumerable<GroupParticipantsWhereUniqueInput>
    update?: Enumerable<GroupParticipantsUpdateWithWhereUniqueWithoutParticipantInput>
    updateMany?: Enumerable<GroupParticipantsUpdateManyWithWhereWithoutParticipantInput>
    deleteMany?: Enumerable<GroupParticipantsScalarWhereInput>
  }

  export type MatchParticipantsUncheckedUpdateManyWithoutParticipantNestedInput = {
    create?: XOR<Enumerable<MatchParticipantsCreateWithoutParticipantInput>, Enumerable<MatchParticipantsUncheckedCreateWithoutParticipantInput>>
    connectOrCreate?: Enumerable<MatchParticipantsCreateOrConnectWithoutParticipantInput>
    upsert?: Enumerable<MatchParticipantsUpsertWithWhereUniqueWithoutParticipantInput>
    createMany?: MatchParticipantsCreateManyParticipantInputEnvelope
    set?: Enumerable<MatchParticipantsWhereUniqueInput>
    disconnect?: Enumerable<MatchParticipantsWhereUniqueInput>
    delete?: Enumerable<MatchParticipantsWhereUniqueInput>
    connect?: Enumerable<MatchParticipantsWhereUniqueInput>
    update?: Enumerable<MatchParticipantsUpdateWithWhereUniqueWithoutParticipantInput>
    updateMany?: Enumerable<MatchParticipantsUpdateManyWithWhereWithoutParticipantInput>
    deleteMany?: Enumerable<MatchParticipantsScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GroupParticipantsCreateNestedManyWithoutGroupInput = {
    create?: XOR<Enumerable<GroupParticipantsCreateWithoutGroupInput>, Enumerable<GroupParticipantsUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupParticipantsCreateOrConnectWithoutGroupInput>
    createMany?: GroupParticipantsCreateManyGroupInputEnvelope
    connect?: Enumerable<GroupParticipantsWhereUniqueInput>
  }

  export type MatchParticipantsCreateNestedManyWithoutGroupInput = {
    create?: XOR<Enumerable<MatchParticipantsCreateWithoutGroupInput>, Enumerable<MatchParticipantsUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<MatchParticipantsCreateOrConnectWithoutGroupInput>
    createMany?: MatchParticipantsCreateManyGroupInputEnvelope
    connect?: Enumerable<MatchParticipantsWhereUniqueInput>
  }

  export type GroupParticipantsUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<Enumerable<GroupParticipantsCreateWithoutGroupInput>, Enumerable<GroupParticipantsUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupParticipantsCreateOrConnectWithoutGroupInput>
    createMany?: GroupParticipantsCreateManyGroupInputEnvelope
    connect?: Enumerable<GroupParticipantsWhereUniqueInput>
  }

  export type MatchParticipantsUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<Enumerable<MatchParticipantsCreateWithoutGroupInput>, Enumerable<MatchParticipantsUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<MatchParticipantsCreateOrConnectWithoutGroupInput>
    createMany?: MatchParticipantsCreateManyGroupInputEnvelope
    connect?: Enumerable<MatchParticipantsWhereUniqueInput>
  }

  export type GroupParticipantsUpdateManyWithoutGroupNestedInput = {
    create?: XOR<Enumerable<GroupParticipantsCreateWithoutGroupInput>, Enumerable<GroupParticipantsUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupParticipantsCreateOrConnectWithoutGroupInput>
    upsert?: Enumerable<GroupParticipantsUpsertWithWhereUniqueWithoutGroupInput>
    createMany?: GroupParticipantsCreateManyGroupInputEnvelope
    set?: Enumerable<GroupParticipantsWhereUniqueInput>
    disconnect?: Enumerable<GroupParticipantsWhereUniqueInput>
    delete?: Enumerable<GroupParticipantsWhereUniqueInput>
    connect?: Enumerable<GroupParticipantsWhereUniqueInput>
    update?: Enumerable<GroupParticipantsUpdateWithWhereUniqueWithoutGroupInput>
    updateMany?: Enumerable<GroupParticipantsUpdateManyWithWhereWithoutGroupInput>
    deleteMany?: Enumerable<GroupParticipantsScalarWhereInput>
  }

  export type MatchParticipantsUpdateManyWithoutGroupNestedInput = {
    create?: XOR<Enumerable<MatchParticipantsCreateWithoutGroupInput>, Enumerable<MatchParticipantsUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<MatchParticipantsCreateOrConnectWithoutGroupInput>
    upsert?: Enumerable<MatchParticipantsUpsertWithWhereUniqueWithoutGroupInput>
    createMany?: MatchParticipantsCreateManyGroupInputEnvelope
    set?: Enumerable<MatchParticipantsWhereUniqueInput>
    disconnect?: Enumerable<MatchParticipantsWhereUniqueInput>
    delete?: Enumerable<MatchParticipantsWhereUniqueInput>
    connect?: Enumerable<MatchParticipantsWhereUniqueInput>
    update?: Enumerable<MatchParticipantsUpdateWithWhereUniqueWithoutGroupInput>
    updateMany?: Enumerable<MatchParticipantsUpdateManyWithWhereWithoutGroupInput>
    deleteMany?: Enumerable<MatchParticipantsScalarWhereInput>
  }

  export type GroupParticipantsUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<Enumerable<GroupParticipantsCreateWithoutGroupInput>, Enumerable<GroupParticipantsUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupParticipantsCreateOrConnectWithoutGroupInput>
    upsert?: Enumerable<GroupParticipantsUpsertWithWhereUniqueWithoutGroupInput>
    createMany?: GroupParticipantsCreateManyGroupInputEnvelope
    set?: Enumerable<GroupParticipantsWhereUniqueInput>
    disconnect?: Enumerable<GroupParticipantsWhereUniqueInput>
    delete?: Enumerable<GroupParticipantsWhereUniqueInput>
    connect?: Enumerable<GroupParticipantsWhereUniqueInput>
    update?: Enumerable<GroupParticipantsUpdateWithWhereUniqueWithoutGroupInput>
    updateMany?: Enumerable<GroupParticipantsUpdateManyWithWhereWithoutGroupInput>
    deleteMany?: Enumerable<GroupParticipantsScalarWhereInput>
  }

  export type MatchParticipantsUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<Enumerable<MatchParticipantsCreateWithoutGroupInput>, Enumerable<MatchParticipantsUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<MatchParticipantsCreateOrConnectWithoutGroupInput>
    upsert?: Enumerable<MatchParticipantsUpsertWithWhereUniqueWithoutGroupInput>
    createMany?: MatchParticipantsCreateManyGroupInputEnvelope
    set?: Enumerable<MatchParticipantsWhereUniqueInput>
    disconnect?: Enumerable<MatchParticipantsWhereUniqueInput>
    delete?: Enumerable<MatchParticipantsWhereUniqueInput>
    connect?: Enumerable<MatchParticipantsWhereUniqueInput>
    update?: Enumerable<MatchParticipantsUpdateWithWhereUniqueWithoutGroupInput>
    updateMany?: Enumerable<MatchParticipantsUpdateManyWithWhereWithoutGroupInput>
    deleteMany?: Enumerable<MatchParticipantsScalarWhereInput>
  }

  export type GroupCreateNestedOneWithoutGroupParticipantsInput = {
    create?: XOR<GroupCreateWithoutGroupParticipantsInput, GroupUncheckedCreateWithoutGroupParticipantsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutGroupParticipantsInput
    connect?: GroupWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGroupParticipantsInput = {
    create?: XOR<UserCreateWithoutGroupParticipantsInput, UserUncheckedCreateWithoutGroupParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupParticipantsInput
    connect?: UserWhereUniqueInput
  }

  export type GroupUpdateOneRequiredWithoutGroupParticipantsNestedInput = {
    create?: XOR<GroupCreateWithoutGroupParticipantsInput, GroupUncheckedCreateWithoutGroupParticipantsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutGroupParticipantsInput
    upsert?: GroupUpsertWithoutGroupParticipantsInput
    connect?: GroupWhereUniqueInput
    update?: XOR<GroupUpdateWithoutGroupParticipantsInput, GroupUncheckedUpdateWithoutGroupParticipantsInput>
  }

  export type UserUpdateOneRequiredWithoutGroupParticipantsNestedInput = {
    create?: XOR<UserCreateWithoutGroupParticipantsInput, UserUncheckedCreateWithoutGroupParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupParticipantsInput
    upsert?: UserUpsertWithoutGroupParticipantsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutGroupParticipantsInput, UserUncheckedUpdateWithoutGroupParticipantsInput>
  }

  export type GroupCreateNestedOneWithoutMatchParticipantsInput = {
    create?: XOR<GroupCreateWithoutMatchParticipantsInput, GroupUncheckedCreateWithoutMatchParticipantsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMatchParticipantsInput
    connect?: GroupWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchParticipantsInput = {
    create?: XOR<UserCreateWithoutMatchParticipantsInput, UserUncheckedCreateWithoutMatchParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchParticipantsInput
    connect?: UserWhereUniqueInput
  }

  export type GroupUpdateOneRequiredWithoutMatchParticipantsNestedInput = {
    create?: XOR<GroupCreateWithoutMatchParticipantsInput, GroupUncheckedCreateWithoutMatchParticipantsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutMatchParticipantsInput
    upsert?: GroupUpsertWithoutMatchParticipantsInput
    connect?: GroupWhereUniqueInput
    update?: XOR<GroupUpdateWithoutMatchParticipantsInput, GroupUncheckedUpdateWithoutMatchParticipantsInput>
  }

  export type UserUpdateOneRequiredWithoutMatchParticipantsNestedInput = {
    create?: XOR<UserCreateWithoutMatchParticipantsInput, UserUncheckedCreateWithoutMatchParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchParticipantsInput
    upsert?: UserUpsertWithoutMatchParticipantsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMatchParticipantsInput, UserUncheckedUpdateWithoutMatchParticipantsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type GroupParticipantsCreateWithoutParticipantInput = {
    id: string
    group: GroupCreateNestedOneWithoutGroupParticipantsInput
  }

  export type GroupParticipantsUncheckedCreateWithoutParticipantInput = {
    id: string
    group_id: string
  }

  export type GroupParticipantsCreateOrConnectWithoutParticipantInput = {
    where: GroupParticipantsWhereUniqueInput
    create: XOR<GroupParticipantsCreateWithoutParticipantInput, GroupParticipantsUncheckedCreateWithoutParticipantInput>
  }

  export type GroupParticipantsCreateManyParticipantInputEnvelope = {
    data: Enumerable<GroupParticipantsCreateManyParticipantInput>
    skipDuplicates?: boolean
  }

  export type MatchParticipantsCreateWithoutParticipantInput = {
    id: string
    group: GroupCreateNestedOneWithoutMatchParticipantsInput
  }

  export type MatchParticipantsUncheckedCreateWithoutParticipantInput = {
    id: string
    group_id: string
  }

  export type MatchParticipantsCreateOrConnectWithoutParticipantInput = {
    where: MatchParticipantsWhereUniqueInput
    create: XOR<MatchParticipantsCreateWithoutParticipantInput, MatchParticipantsUncheckedCreateWithoutParticipantInput>
  }

  export type MatchParticipantsCreateManyParticipantInputEnvelope = {
    data: Enumerable<MatchParticipantsCreateManyParticipantInput>
    skipDuplicates?: boolean
  }

  export type GroupParticipantsUpsertWithWhereUniqueWithoutParticipantInput = {
    where: GroupParticipantsWhereUniqueInput
    update: XOR<GroupParticipantsUpdateWithoutParticipantInput, GroupParticipantsUncheckedUpdateWithoutParticipantInput>
    create: XOR<GroupParticipantsCreateWithoutParticipantInput, GroupParticipantsUncheckedCreateWithoutParticipantInput>
  }

  export type GroupParticipantsUpdateWithWhereUniqueWithoutParticipantInput = {
    where: GroupParticipantsWhereUniqueInput
    data: XOR<GroupParticipantsUpdateWithoutParticipantInput, GroupParticipantsUncheckedUpdateWithoutParticipantInput>
  }

  export type GroupParticipantsUpdateManyWithWhereWithoutParticipantInput = {
    where: GroupParticipantsScalarWhereInput
    data: XOR<GroupParticipantsUpdateManyMutationInput, GroupParticipantsUncheckedUpdateManyWithoutGroupParticipantsInput>
  }

  export type GroupParticipantsScalarWhereInput = {
    AND?: Enumerable<GroupParticipantsScalarWhereInput>
    OR?: Enumerable<GroupParticipantsScalarWhereInput>
    NOT?: Enumerable<GroupParticipantsScalarWhereInput>
    id?: StringFilter | string
    group_id?: StringFilter | string
    participant_id?: StringFilter | string
  }

  export type MatchParticipantsUpsertWithWhereUniqueWithoutParticipantInput = {
    where: MatchParticipantsWhereUniqueInput
    update: XOR<MatchParticipantsUpdateWithoutParticipantInput, MatchParticipantsUncheckedUpdateWithoutParticipantInput>
    create: XOR<MatchParticipantsCreateWithoutParticipantInput, MatchParticipantsUncheckedCreateWithoutParticipantInput>
  }

  export type MatchParticipantsUpdateWithWhereUniqueWithoutParticipantInput = {
    where: MatchParticipantsWhereUniqueInput
    data: XOR<MatchParticipantsUpdateWithoutParticipantInput, MatchParticipantsUncheckedUpdateWithoutParticipantInput>
  }

  export type MatchParticipantsUpdateManyWithWhereWithoutParticipantInput = {
    where: MatchParticipantsScalarWhereInput
    data: XOR<MatchParticipantsUpdateManyMutationInput, MatchParticipantsUncheckedUpdateManyWithoutMatchParticipantsInput>
  }

  export type MatchParticipantsScalarWhereInput = {
    AND?: Enumerable<MatchParticipantsScalarWhereInput>
    OR?: Enumerable<MatchParticipantsScalarWhereInput>
    NOT?: Enumerable<MatchParticipantsScalarWhereInput>
    id?: StringFilter | string
    group_id?: StringFilter | string
    participant_id?: StringFilter | string
  }

  export type GroupParticipantsCreateWithoutGroupInput = {
    id: string
    participant: UserCreateNestedOneWithoutGroupParticipantsInput
  }

  export type GroupParticipantsUncheckedCreateWithoutGroupInput = {
    id: string
    participant_id: string
  }

  export type GroupParticipantsCreateOrConnectWithoutGroupInput = {
    where: GroupParticipantsWhereUniqueInput
    create: XOR<GroupParticipantsCreateWithoutGroupInput, GroupParticipantsUncheckedCreateWithoutGroupInput>
  }

  export type GroupParticipantsCreateManyGroupInputEnvelope = {
    data: Enumerable<GroupParticipantsCreateManyGroupInput>
    skipDuplicates?: boolean
  }

  export type MatchParticipantsCreateWithoutGroupInput = {
    id: string
    participant: UserCreateNestedOneWithoutMatchParticipantsInput
  }

  export type MatchParticipantsUncheckedCreateWithoutGroupInput = {
    id: string
    participant_id: string
  }

  export type MatchParticipantsCreateOrConnectWithoutGroupInput = {
    where: MatchParticipantsWhereUniqueInput
    create: XOR<MatchParticipantsCreateWithoutGroupInput, MatchParticipantsUncheckedCreateWithoutGroupInput>
  }

  export type MatchParticipantsCreateManyGroupInputEnvelope = {
    data: Enumerable<MatchParticipantsCreateManyGroupInput>
    skipDuplicates?: boolean
  }

  export type GroupParticipantsUpsertWithWhereUniqueWithoutGroupInput = {
    where: GroupParticipantsWhereUniqueInput
    update: XOR<GroupParticipantsUpdateWithoutGroupInput, GroupParticipantsUncheckedUpdateWithoutGroupInput>
    create: XOR<GroupParticipantsCreateWithoutGroupInput, GroupParticipantsUncheckedCreateWithoutGroupInput>
  }

  export type GroupParticipantsUpdateWithWhereUniqueWithoutGroupInput = {
    where: GroupParticipantsWhereUniqueInput
    data: XOR<GroupParticipantsUpdateWithoutGroupInput, GroupParticipantsUncheckedUpdateWithoutGroupInput>
  }

  export type GroupParticipantsUpdateManyWithWhereWithoutGroupInput = {
    where: GroupParticipantsScalarWhereInput
    data: XOR<GroupParticipantsUpdateManyMutationInput, GroupParticipantsUncheckedUpdateManyWithoutGroupParticipantsInput>
  }

  export type MatchParticipantsUpsertWithWhereUniqueWithoutGroupInput = {
    where: MatchParticipantsWhereUniqueInput
    update: XOR<MatchParticipantsUpdateWithoutGroupInput, MatchParticipantsUncheckedUpdateWithoutGroupInput>
    create: XOR<MatchParticipantsCreateWithoutGroupInput, MatchParticipantsUncheckedCreateWithoutGroupInput>
  }

  export type MatchParticipantsUpdateWithWhereUniqueWithoutGroupInput = {
    where: MatchParticipantsWhereUniqueInput
    data: XOR<MatchParticipantsUpdateWithoutGroupInput, MatchParticipantsUncheckedUpdateWithoutGroupInput>
  }

  export type MatchParticipantsUpdateManyWithWhereWithoutGroupInput = {
    where: MatchParticipantsScalarWhereInput
    data: XOR<MatchParticipantsUpdateManyMutationInput, MatchParticipantsUncheckedUpdateManyWithoutMatchParticipantsInput>
  }

  export type GroupCreateWithoutGroupParticipantsInput = {
    id: string
    name: string
    description: string
    MatchParticipants?: MatchParticipantsCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutGroupParticipantsInput = {
    id: string
    name: string
    description: string
    MatchParticipants?: MatchParticipantsUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutGroupParticipantsInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutGroupParticipantsInput, GroupUncheckedCreateWithoutGroupParticipantsInput>
  }

  export type UserCreateWithoutGroupParticipantsInput = {
    id: string
    nickname: string
    email: string
    password: string
    MatchParticipants?: MatchParticipantsCreateNestedManyWithoutParticipantInput
  }

  export type UserUncheckedCreateWithoutGroupParticipantsInput = {
    id: string
    nickname: string
    email: string
    password: string
    MatchParticipants?: MatchParticipantsUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type UserCreateOrConnectWithoutGroupParticipantsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGroupParticipantsInput, UserUncheckedCreateWithoutGroupParticipantsInput>
  }

  export type GroupUpsertWithoutGroupParticipantsInput = {
    update: XOR<GroupUpdateWithoutGroupParticipantsInput, GroupUncheckedUpdateWithoutGroupParticipantsInput>
    create: XOR<GroupCreateWithoutGroupParticipantsInput, GroupUncheckedCreateWithoutGroupParticipantsInput>
  }

  export type GroupUpdateWithoutGroupParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    MatchParticipants?: MatchParticipantsUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutGroupParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    MatchParticipants?: MatchParticipantsUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type UserUpsertWithoutGroupParticipantsInput = {
    update: XOR<UserUpdateWithoutGroupParticipantsInput, UserUncheckedUpdateWithoutGroupParticipantsInput>
    create: XOR<UserCreateWithoutGroupParticipantsInput, UserUncheckedCreateWithoutGroupParticipantsInput>
  }

  export type UserUpdateWithoutGroupParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    MatchParticipants?: MatchParticipantsUpdateManyWithoutParticipantNestedInput
  }

  export type UserUncheckedUpdateWithoutGroupParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    MatchParticipants?: MatchParticipantsUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type GroupCreateWithoutMatchParticipantsInput = {
    id: string
    name: string
    description: string
    GroupParticipants?: GroupParticipantsCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutMatchParticipantsInput = {
    id: string
    name: string
    description: string
    GroupParticipants?: GroupParticipantsUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutMatchParticipantsInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutMatchParticipantsInput, GroupUncheckedCreateWithoutMatchParticipantsInput>
  }

  export type UserCreateWithoutMatchParticipantsInput = {
    id: string
    nickname: string
    email: string
    password: string
    GroupParticipants?: GroupParticipantsCreateNestedManyWithoutParticipantInput
  }

  export type UserUncheckedCreateWithoutMatchParticipantsInput = {
    id: string
    nickname: string
    email: string
    password: string
    GroupParticipants?: GroupParticipantsUncheckedCreateNestedManyWithoutParticipantInput
  }

  export type UserCreateOrConnectWithoutMatchParticipantsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchParticipantsInput, UserUncheckedCreateWithoutMatchParticipantsInput>
  }

  export type GroupUpsertWithoutMatchParticipantsInput = {
    update: XOR<GroupUpdateWithoutMatchParticipantsInput, GroupUncheckedUpdateWithoutMatchParticipantsInput>
    create: XOR<GroupCreateWithoutMatchParticipantsInput, GroupUncheckedCreateWithoutMatchParticipantsInput>
  }

  export type GroupUpdateWithoutMatchParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    GroupParticipants?: GroupParticipantsUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutMatchParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    GroupParticipants?: GroupParticipantsUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type UserUpsertWithoutMatchParticipantsInput = {
    update: XOR<UserUpdateWithoutMatchParticipantsInput, UserUncheckedUpdateWithoutMatchParticipantsInput>
    create: XOR<UserCreateWithoutMatchParticipantsInput, UserUncheckedCreateWithoutMatchParticipantsInput>
  }

  export type UserUpdateWithoutMatchParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    GroupParticipants?: GroupParticipantsUpdateManyWithoutParticipantNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    GroupParticipants?: GroupParticipantsUncheckedUpdateManyWithoutParticipantNestedInput
  }

  export type GroupParticipantsCreateManyParticipantInput = {
    id: string
    group_id: string
  }

  export type MatchParticipantsCreateManyParticipantInput = {
    id: string
    group_id: string
  }

  export type GroupParticipantsUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: GroupUpdateOneRequiredWithoutGroupParticipantsNestedInput
  }

  export type GroupParticipantsUncheckedUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    group_id?: StringFieldUpdateOperationsInput | string
  }

  export type GroupParticipantsUncheckedUpdateManyWithoutGroupParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    group_id?: StringFieldUpdateOperationsInput | string
  }

  export type MatchParticipantsUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: GroupUpdateOneRequiredWithoutMatchParticipantsNestedInput
  }

  export type MatchParticipantsUncheckedUpdateWithoutParticipantInput = {
    id?: StringFieldUpdateOperationsInput | string
    group_id?: StringFieldUpdateOperationsInput | string
  }

  export type MatchParticipantsUncheckedUpdateManyWithoutMatchParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    group_id?: StringFieldUpdateOperationsInput | string
  }

  export type GroupParticipantsCreateManyGroupInput = {
    id: string
    participant_id: string
  }

  export type MatchParticipantsCreateManyGroupInput = {
    id: string
    participant_id: string
  }

  export type GroupParticipantsUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    participant?: UserUpdateOneRequiredWithoutGroupParticipantsNestedInput
  }

  export type GroupParticipantsUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    participant_id?: StringFieldUpdateOperationsInput | string
  }

  export type MatchParticipantsUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    participant?: UserUpdateOneRequiredWithoutMatchParticipantsNestedInput
  }

  export type MatchParticipantsUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    participant_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}